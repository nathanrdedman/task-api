# This is a basic workflow to help you get started with Actions
name: Checks and Tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  # Trigger the workflow on push or pull request,
  # but only for the master branch
  push:
    branches:
      - main
      - develop

  pull_request:
    branches:
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains two jobs "linting" and "test"

  linting:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v4
    - uses: fjwillemsen/setup-nox2@v3.0.0
    - name: Run lint check
      run: nox -s lint
  typechecks:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v4
    - uses: fjwillemsen/setup-nox2@v3.0.0
    - name: Run type check
      run: nox -s typecheck
  formatchecks:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v4
    - uses: fjwillemsen/setup-nox2@v3.0.0
    - name: Run formatting check
      run: nox -s formatcheck
  importschecks:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v4
    - uses: fjwillemsen/setup-nox2@v3.0.0
    - name: Run Isort for import order check
      run: nox -s importscheck
  test:
    needs: 
      - linting
      - typechecks
      - formatchecks
      - importschecks
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: mysecretpassword
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    - uses: fjwillemsen/setup-nox2@v3.0.0
    - name: Set up Python
      uses: actions/setup-python@v4      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -e .
    - name: Prepare DB
      run: |
        alembic upgrade head
      env:
        SQLALCHEMY_DATABASE_URI: "postgresql://postgres:mysecretpassword@localhost:5432/postgres"
    - name: Test with pytest
      run: |
        nox -s test
      env:
        SQLALCHEMY_DATABASE_URI: "postgresql://postgres:mysecretpassword@localhost:5432/postgres"